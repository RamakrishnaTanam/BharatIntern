
# Import necessary libraries
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.preprocessing import MinMaxScaler
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import LSTM, Dense

# Load historical stock price data (assuming you have a CSV file)
# Replace 'your_data.csv' with the actual filename or URL of your dataset
data = pd.read_csv('your_data.csv')

# Extract the 'Close' prices for prediction
prices = data['Close'].values.reshape(-1, 1)

# Normalize the data
scaler = MinMaxScaler(feature_range=(0, 1))
scaled_prices = scaler.fit_transform(prices)

# Prepare data for LSTM model
def create_dataset(dataset, time_steps=1):
  dataX, dataY = [], []
  for i in range(len(dataset) - time_steps - 1):
    a = dataset[i:(i + time_steps), 0]
    dataX.append(a)
    dataY.append(dataset[i + time_steps, 0])
  return np.array(dataX), np.array(dataY)

time_steps = 10 # You can adjust this value based on your dataset
X, y = create_dataset(scaled_prices, time_steps)

# Reshape the data for LSTM input (samples, time steps, features)
X = np.reshape(X, (X.shape[0], X.shape[1], 1))

# Build the LSTM model
model = Sequential()
model.add(LSTM(units=50, return_sequences=True, input_shape=(X.shape[1], 1)))
model.add(LSTM(units=50))
model.add(Dense(units=1))

# Compile the model
model.compile(optimizer='adam', loss='mean_squared_error')

# Train the model
model.fit(X, y, epochs=100, batch_size=32)

# Make predictions
test_data = scaled_prices[-time_steps:]
test_data = np.reshape(test_data, (1, time_steps, 1))
predicted_price = model.predict(test_data)
predicted_price = scaler.inverse_transform(predicted_price)

# Print the predicted stock price
print("Predicted Stock Price:", predicted_price[0][0])
